/* eslint-disable */
/* eslint-env mocha, browser */
import {strictEqual} from 'assert';
import {createElement as h} from 'react';
import {mount} from 'enzyme';
import sinon from 'sinon';
import MyComponent from '.';


describe('MyComponent', () => {
	it('Can change props', () => {
		const component = h(MyComponent, {myprop: 'BEFORE'});
		const wrapper = mount(component);
		strictEqual(wrapper.props().myprop, 'BEFORE', 'First render');
		wrapper.setProps({myprop: 'AFTER'});
		strictEqual(wrapper.props().myprop, 'AFTER', 'Second render');
	});

	it('Button click: without onButtonClick', () => {
		const component = h(MyComponent);
		const wrapper = mount(component);
		strictEqual(wrapper.state().myState, 1, 'myState before clicks');
		wrapper.find('button').simulate('click');
		strictEqual(wrapper.state().myState, 2, 'myState after second click');
		wrapper.find('button').simulate('click');
		strictEqual(wrapper.state().myState, 3, 'myState after second click');
	});

	it('Button click: with onButtonClick', () => {
		const onButtonClick = sinon.spy();
		const component = h(MyComponent, {onButtonClick});
		const wrapper = mount(component);
		strictEqual(onButtonClick.callCount, 0, 'onButtonClick has not been called yet');
		strictEqual(wrapper.state().myState, 1, 'myState before clicks');
		wrapper.find('button').simulate('click');
		strictEqual(onButtonClick.callCount, 1, 'onButtonClick has been called once');
		strictEqual(wrapper.state().myState, 2, 'myState after first click');
		wrapper.find('button').simulate('click');
		strictEqual(onButtonClick.callCount, 2, 'onButtonClick has been calledtwice');
		strictEqual(wrapper.state().myState, 3, 'myState after second click');
	});

	// it('Calls componentDidMount', () => {
	// 	sinon.spy(MyComponent.prototype, 'componentDidMount'); // I don't like that it modifies the module's function, would have to be 100% sure restore get called at the end
	// 	const component = h(MyComponent);
	// 	strictEqual(MyComponent.prototype.componentDidMount.callCount, 1, 'componentDidMount has not been called yet');
	// 	/*const wrapper =*/ mount(component);
	// 	strictEqual(MyComponent.prototype.componentDidMount.callCount, 1, 'componentDidMount has been called');
	// 	MyComponent.prototype.componentDidMount.restore();
	// });
});
